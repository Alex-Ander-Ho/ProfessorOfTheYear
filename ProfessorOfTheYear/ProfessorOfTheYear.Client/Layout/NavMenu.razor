@implements IDisposable

@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-md fixed-top">
    <a class="navbar-brand" href="/">
        <img class="min-logo" src="img/white-min-logo.png">
    </a>
    <button class="navbar-toggler @NavButtonCssClass" type="button" aria-controls="navbarCollapse"
        aria-label="Toggle navigation" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
        <ul class="navbar-nav nav-underline">
            <li class="nav-item">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Главная</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/voting">Голосование</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/about">О конкурсе</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/feedback">Обратная связь</NavLink>
            </li>
        </ul>
        <div class="navbar-nav nav-buttons ms-auto">
            <AuthorizeView>
                <Authorized>
                    <div class="nav-item">
                        <Button 
                            Type="ButtonType.Link" 
                            Color="ButtonColor.Light" 
                            Outline="true" 
                            To="Account/Manage"
                            style="font-size: 20px; font-weight: 500; border: 2px solid #fff;"> //вынести стиль в css файл нормально
                                <Icon Name="IconName.Person" /> Профиль
                        </Button>
                    </div>
                    @* <div class="nav-item">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <Button 
                                Type="ButtonType.Submit" 
                                Color="ButtonColor.Light" 
                                Outline="true"
                                style="font-size: 20px; font-weight: 500; border: 2px solid #fff;">
                                    <Icon Name="IconName.BoxArrowRight" /> Выйти
                            </Button>
                        </form>
                    </div> *@
                </Authorized>
                <NotAuthorized>
                    @* <div class="nav-item">
                        <Button 
                            Type="ButtonType.Link" 
                            Color="ButtonColor.Light" 
                            Outline="true" 
                            To="Account/Register"
                            style="font-size: 20px; font-weight: 500; border: 2px solid #fff;">
                                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Зарегистрироваться //изменить span на Icon
                        </Button>
                    </div> *@
                    <div class="nav-item">
                        <Button 
                            Type="ButtonType.Link" 
                            Color="ButtonColor.Light" 
                            Outline="true" 
                            To="Account/Login"
                            style="font-size: 20px; font-weight: 500; border: 2px solid #fff;">
                                <Icon Name="IconName.BoxArrowInRight" /> Войти
                        </Button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string? currentUrl;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

